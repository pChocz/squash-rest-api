<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pj.squashrestapp.mybatis.GameDistributionMapper">

    <select id="getDistributionDataForTwoPlayers"
            resultType="com.pj.squashrestapp.dto.setresultshistogram.SetResultsHistogramDataDto">
        select count(*)                                              as count,
               CASE
                   WHEN greatest(t.first_player_score, t.second_player_score) = t.first_player_score THEN playerOneId
                   ELSE playerTwoId
                   END                                               as winner_id,
               CASE
                   WHEN greatest(t.first_player_score, t.second_player_score) = t.first_player_score THEN playerTwoId
                   ELSE playerOneId
                   END                                               as looser_id,
               greatest(t.first_player_score, t.second_player_score) as winning_result,
               least(t.first_player_score, t.second_player_score)    as loosing_result
        from (select sr.first_player_score  as first_player_score,
                     sr.second_player_score as second_player_score,
                     p1.id                  as playerOneId,
                     p2.id                  as playerTwoId
              from set_results sr
                       join matches m on m.id = sr.match_id
                       join players p1 on m.first_player_id = p1.id
                       join players p2 on m.second_player_id = p2.id

              <if test="includeAdditional == true">
                  union all

                  select sr.first_player_score  as first_player_score,
                         sr.second_player_score as second_player_score,
                         p1.id                  as playerOneId,
                         p2.id                  as playerTwoId
                  from additional_set_results sr
                           join additional_matches m on m.id = sr.match_id
                           join players p1 on m.first_player_id = p1.id
                           join players p2 on m.second_player_id = p2.id
              </if>

              ) as t
        where ((playerOneId = #{playerOneId} and playerTwoId = #{playerTwoId}) or
               (playerTwoId = #{playerOneId} and playerOneId = #{playerTwoId}))
          and t.first_player_score is not null
          and t.second_player_score is not null
        group by winning_result,
                 loosing_result,
                 winner_id,
                 looser_id
    </select>

    <select id="getDistributionDataForLeague"
            resultType="com.pj.squashrestapp.dto.setresultshistogram.SetResultsHistogramDataDto">
        select count(*)                                              as count,
               CASE
                   WHEN greatest(t.first_player_score, t.second_player_score) = t.first_player_score THEN playerOneId
                   ELSE playerTwoId
                   END                                               as winner_id,
               CASE
                   WHEN greatest(t.first_player_score, t.second_player_score) = t.first_player_score THEN playerTwoId
                   ELSE playerOneId
                   END                                               as looser_id,
               greatest(t.first_player_score, t.second_player_score) as winning_result,
               least(t.first_player_score, t.second_player_score)    as loosing_result
        from (select sr.first_player_score  as first_player_score,
                     sr.second_player_score as second_player_score,
                     p1.id                  as playerOneId,
                     p2.id                  as playerTwoId
              from set_results sr
                       join matches m on m.id = sr.match_id
                       join players p1 on m.first_player_id = p1.id
                       join players p2 on m.second_player_id = p2.id
                       join round_groups rg on m.round_group_id = rg.id
                       join rounds r on rg.round_id = r.id
                       join seasons s on r.season_id = s.id
                       join leagues l on s.league_id = l.id
              where l.uuid = #{leagueUuid}
                and (#{seasonNumbers}::int[] is null or s.number = ANY (#{seasonNumbers}::int[]))

              <if test="includeAdditional == true">
                  union all

                  select sr.first_player_score  as first_player_score,
                         sr.second_player_score as second_player_score,
                         p1.id                  as playerOneId,
                         p2.id                  as playerTwoId
                  from additional_set_results sr
                           join additional_matches m on m.id = sr.match_id
                           join leagues l on l.id = m.league_id
                           join players p1 on m.first_player_id = p1.id
                           join players p2 on m.second_player_id = p2.id
                  where l.uuid = #{leagueUuid}
                    and (#{seasonNumbers}::int[] is null or m.season_number = ANY (#{seasonNumbers}::int[]))
              </if>

              ) as t
        where t.first_player_score is not null
          and t.second_player_score is not null
        group by winning_result,
                 loosing_result,
                 winner_id,
                 looser_id
    </select>

</mapper>
