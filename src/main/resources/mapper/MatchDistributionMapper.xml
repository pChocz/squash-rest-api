<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pj.squashrestapp.mybatis.MatchDistributionMapper">

    <select id="getDistributionDataForLeague"
            resultType="com.pj.squashrestapp.dto.matchresultsdistribution.MatchResultDistributionDataDto">
        select count(*)                                                     as count,
               CASE
                   WHEN grouped.player_one_games &gt; grouped.player_two_games THEN grouped.player_one_id
                   ELSE grouped.player_two_id
                   END                                                      as winner_id,
               CASE
                   WHEN grouped.player_one_games &lt; grouped.player_two_games THEN grouped.player_one_id
                   ELSE grouped.player_two_id
                   END                                                      as looser_id,
               greatest(grouped.player_one_games, grouped.player_two_games) as games_won,
               least(grouped.player_one_games, grouped.player_two_games)    as games_lost
        from (select sets.match_id,
                     sets.match_format_type,
                     sets.player_one_id,
                     sets.player_two_id,
                     count(CASE WHEN sets.player_one_result &gt; sets.player_two_result THEN 1 END) as player_one_games,
                     count(CASE WHEN sets.player_one_result &lt; sets.player_two_result THEN 1 END) as player_two_games,
                     count(*)                                                                    as games
              from (select m.id                   as match_id,
                           m.match_format_type    as match_format_type,
                           p1.id                  as player_one_id,
                           p2.id                  as player_two_id,
                           sr.first_player_score  as player_one_result,
                           sr.second_player_score as player_two_result
                    from set_results sr
                             join matches m on sr.match_id = m.id
                             join round_groups rg on rg.id = m.round_group_id
                             join rounds r on r.id = rg.round_id
                             join seasons s on s.id = r.season_id
                             join leagues l on l.id = s.league_id
                             join players p1 on m.first_player_id = p1.id
                             join players p2 on m.second_player_id = p2.id
                    where l.uuid = #{leagueUuid}
                      and (#{seasonNumbers}::int[] is null or s.number = ANY (#{seasonNumbers}::int[]))
                      and sr.first_player_score is not null
                      and sr.second_player_score is not null

                    <if test="includeAdditional == true">
                        union all
                        select m.id                   as match_id,
                               m.match_format_type    as match_format_type,
                               p1.id                  as player_one_id,
                               p2.id                  as player_two_id,
                               sr.first_player_score  as player_one_result,
                               sr.second_player_score as player_two_result
                        from additional_set_results sr
                                 join additional_matches m on sr.match_id = m.id
                                 join leagues l on l.id = m.league_id
                                 join players p1 on m.first_player_id = p1.id
                                 join players p2 on m.second_player_id = p2.id
                        where l.uuid = #{leagueUuid}
                          and (#{seasonNumbers}::int[] is null or m.season_number = ANY (#{seasonNumbers}::int[]))
                          and sr.first_player_score is not null
                          and sr.second_player_score is not null
                    </if>

                    ) as sets
              group by sets.match_id,
                       sets.match_format_type,
                       sets.player_one_id,
                       sets.player_two_id) as grouped
        group by winner_id,
                 looser_id,
                 games_won,
                 games_lost
    </select>

</mapper>
